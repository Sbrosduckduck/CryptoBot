from admin_handlers import ADMIN_EMAIL  # Remove ADMIN_BUTTONS import
import logging
import os
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CallbackContext, ConversationHandler, CallbackQueryHandler, 
    MessageHandler, Filters, CommandHandler
)
from database import (
    add_user, get_user, add_transaction, get_db, get_all_cryptos, 
    get_crypto_by_id, buy_crypto, sell_crypto, get_price_history
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º–æ–¥—É–ª—è utils.py, –∞ –Ω–µ –∏–∑ –ø–∞–∫–µ—Ç–∞ utils
from utils import validate_email_address, validate_phone_number, validate_date, format_money, is_admin, format_crypto_amount
from typing import Dict

# Add this after the imports
USER_BUTTONS = [
    ["üíº –ü—Ä–æ—Ñ–∏–ª—å", "üí∞ –ë–∞–ª–∞–Ω—Å"],
    ["üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "üì§ –í—ã–≤–µ—Å—Ç–∏"],
    ["üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", "üè¶ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"]
]

# Configuration
logger = logging.getLogger(__name__)

# State definitions for conversations
FIRST_NAME, LAST_NAME, MIDDLE_NAME, BIRTH_DATE, EMAIL, PHONE = range(6)

def get_keyboard(user=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user and is_admin(user):
        from admin_handlers import ADMIN_BUTTONS  # Import ADMIN_BUTTONS only when needed
        return ReplyKeyboardMarkup(ADMIN_BUTTONS, resize_keyboard=True)
    return ReplyKeyboardMarkup(USER_BUTTONS, resize_keyboard=True)

def start(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    if user:
        keyboard = get_keyboard(user)
        update.message.reply_text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user['first_name']}!",
            reply_markup=keyboard
        )
    else:
        update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CryptoBot! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )

def register_start(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    if user:
        update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
        )
        return ConversationHandler.END

    update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    return FIRST_NAME

def first_name(update: Update, context: CallbackContext):
    context.user_data['first_name'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    return LAST_NAME

def last_name(update: Update, context: CallbackContext):
    context.user_data['last_name'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:")
    return MIDDLE_NAME

def middle_name(update: Update, context: CallbackContext):
    context.user_data['middle_name'] = update.message.text
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
    )
    return BIRTH_DATE

def birth_date(update: Update, context: CallbackContext):
    date = update.message.text
    if not validate_date(date):
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):"
        )
        return BIRTH_DATE

    context.user_data['birth_date'] = date
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    return EMAIL

def email(update: Update, context: CallbackContext):
    email = update.message.text
    if not validate_email_address(email):
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return EMAIL

    context.user_data['email'] = email
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX:"
    )
    return PHONE

def phone(update: Update, context: CallbackContext):
    phone = update.message.text
    if not validate_phone_number(phone):
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (+7XXXXXXXXXX):"
        )
        return PHONE

    context.user_data['phone'] = phone

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å 250 —Ä—É–±–ª–µ–π
    user_data = {
        'user_id': update.effective_user.id,
        'balance': 250,  # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        **context.user_data
    }
    add_user(user_data)

    update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å 250‚ÇΩ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞."
    )
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

def profile(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    if not user:
        update.message.reply_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return

    profile_text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
–ò–º—è: {user['first_name']}
–§–∞–º–∏–ª–∏—è: {user['last_name']}
–û—Ç—á–µ—Å—Ç–≤–æ: {user['middle_name']}
Email: {user['email']}
–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}
–ë–∞–ª–∞–Ω—Å: {format_money(user['balance'])}
    """
    update.message.reply_text(profile_text)

def deposit(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    if not user:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return

    args = context.args
    if not args or not args[0].isdigit():
        update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deposit <—Å—É–º–º–∞>"
        )
        return

    amount = float(args[0])
    if amount < 100:
        update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 ‚ÇΩ")
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    transaction_id = add_transaction(user['user_id'], 'deposit', amount)
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT unique_id FROM transactions WHERE id = ?", (transaction_id,))
        unique_id = cursor.fetchone()['unique_id']
        last_six = str(unique_id)[-6:] if unique_id else 'XXXXXX'

    update.message.reply_text(
        f"üè¶ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∞\n\n"
        f"–°—É–º–º–∞: {format_money(amount)}\n"
        f"ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: #{unique_id}\n\n"
        "üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "2204 3204 1877 7332\n\n"
        f"‚ùóÔ∏è –í–∞–∂–Ω–æ: —É–∫–∞–∂–∏—Ç–µ {last_six} –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )

def withdraw(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    if not user:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return

    args = context.args
    if not args or not args[0].isdigit():
        update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /withdraw <—Å—É–º–º–∞>"
        )
        return

    amount = float(args[0])
    if amount < 100:
        update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: 100 ‚ÇΩ")
        return

    if amount > user['balance']:
        update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    add_transaction(user['user_id'], 'withdraw', amount)

    update.message.reply_text(
        f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É {format_money(amount)}.\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )

def handle_button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏")

    text = update.message.text
    user = get_user(update.effective_user.id)

    if not user:
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {text}")

    # –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if is_admin(user):
        if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            from admin_handlers import admin_stats
            admin_stats(update, context)
            return
        elif text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
            from admin_handlers import show_users
            show_users(update, context)
            return
        elif text == "üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏":  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            from admin_handlers import view_transactions
            view_transactions(update, context)
            return
        elif text == "üì• –ó–∞—è–≤–∫–∏":  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–≤—ã–≤–æ–¥
            from admin_handlers import view_pending_transactions
            view_pending_transactions(update, context)
            return
        elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç—É":
            from admin_handlers import add_crypto_command
            add_crypto_command(update, context)
            return
        elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç—É":
            from admin_handlers import edit_crypto_command
            edit_crypto_command(update, context)
            return
        elif text == "‚Ü©Ô∏è –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é":
            keyboard = get_keyboard()
            update.message.reply_text("–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.", reply_markup=keyboard)
            return

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if text == "üíº –ü—Ä–æ—Ñ–∏–ª—å":
        profile(update, context)
    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        show_balance(update, context)
    elif text == "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å":
        show_deposit_info(update, context)
    elif text == "üì§ –í—ã–≤–µ—Å—Ç–∏":
        show_withdraw_info(update, context)
    elif text == "üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å":
        show_portfolio(update, context)
    elif text == "üè¶ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã":
        show_available_cryptos(update, context)



def show_balance(update: Update, context: CallbackContext):
    user = get_user(update.effective_user.id)
    update.message.reply_text(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {format_money(user['balance'])}")

def show_deposit_info(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/deposit <—Å—É–º–º–∞>\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {format_money(100)}"
    )

def show_withdraw_info(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/withdraw <—Å—É–º–º–∞>\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {format_money(100)}"
    )

def buy_crypto_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è buy_crypto_handler")
    query = update.callback_query
    query.answer()

    user = get_user(query.from_user.id)
    if not user:
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
        query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ callback_data
    crypto_id = int(query.data.split('_')[1])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} –≤—ã–±—Ä–∞–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É ID: {crypto_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    crypto = get_crypto_by_id(crypto_id)
    if not crypto:
        query.message.reply_text("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    context.user_data['buying_crypto_id'] = crypto_id
    context.user_data['buying_crypto_name'] = crypto['name']
    context.user_data['buying_crypto_symbol'] = crypto['symbol']
    context.user_data['buying_crypto_rate'] = crypto['rate']

    message = f"üõí –ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n\n"
    message += f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {crypto['name']} ({crypto['symbol']})\n"
    message += f"–ö—É—Ä—Å: {format_money(crypto['rate'])}‚ÇΩ\n"
    message += f"–í–∞—à –±–∞–ª–∞–Ω—Å: {format_money(user['balance'])}‚ÇΩ\n\n"

    # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    max_affordable = user['balance'] / crypto['rate']
    max_available = crypto['available_supply']
    max_possible = min(max_affordable, max_available)

    context.user_data['max_crypto_amount'] = max_possible

    message += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {format_crypto_amount(max_possible)} {crypto['symbol']}\n\n"
    message += "üí≠ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
    percentages = [10, 25, 50, 75, 100]
    keyboard_row = []

    for percent in percentages:
        amount = max_possible * (percent / 100)
        if amount > 0:
            keyboard_row.append(InlineKeyboardButton(
                f"{percent}% ({format_crypto_amount(amount)})",
                callback_data=f"buyamt_{crypto_id}_{amount:.8f}"
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        if len(keyboard_row) == 3 or percent == percentages[-1]:
            keyboard.append(keyboard_row)
            keyboard_row = []

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="buycancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text(message, reply_markup=reply_markup)
    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è —Å—É–º–º—ã
    context.dispatcher.add_handler(
        CallbackQueryHandler(
            process_crypto_purchase_callback,
            pattern=r'^buyamt_|^buycancel$'
        ),
        group=1
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.dispatcher.add_handler(
        MessageHandler(
            Filters.text & ~Filters.command,
            process_crypto_purchase,
            pass_user_data=True
        ),
        group=2  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    )

def process_crypto_purchase(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in context.dispatcher.handlers.get(1, []):
        context.dispatcher.remove_handler(handler, 1)
    for handler in context.dispatcher.handlers.get(2, []):
        context.dispatcher.remove_handler(handler, 2)

    user = get_user(update.effective_user.id)
    if not user:
        update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if 'buying_crypto_id' not in context.user_data:
        update.message.reply_text("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –ø–æ–∫—É–ø–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return

    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount = float(update.message.text.strip().replace(',', '.'))
        if amount <= 0:
            update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
    except ValueError:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    crypto_id = context.user_data['buying_crypto_id']
    crypto_name = context.user_data['buying_crypto_name']
    crypto_symbol = context.user_data['buying_crypto_symbol']
    crypto_rate = context.user_data['buying_crypto_rate']
    max_amount = context.user_data.get('max_crypto_amount', 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
    if amount > max_amount:
        update.message.reply_text(
            f"–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({format_crypto_amount(amount)}) "
            f"–ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ ({format_crypto_amount(max_amount)})."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥—Å—Ç–≤
    total_cost = amount * crypto_rate
    if total_cost > user['balance']:
        update.message.reply_text(
            f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {format_money(total_cost)}‚ÇΩ, "
            f"—É –≤–∞—Å: {format_money(user['balance'])}‚ÇΩ"
        )
        return

    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É
    if buy_crypto(user['user_id'], crypto_id, amount):
        update.message.reply_text(
            f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!\n\n"
            f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {format_crypto_amount(amount)} {crypto_symbol} "
            f"–Ω–∞ —Å—É–º–º—É {format_money(total_cost)}‚ÇΩ\n\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {format_money(user['balance'] - total_cost)}‚ÇΩ"
        )
    else:
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."
        )

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
    for key in list(context.user_data.keys()):
        if key.startswith('buying_crypto_') or key == 'max_crypto_amount':
            del context.user_data[key]

def process_crypto_purchase_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    query = update.callback_query
    query.answer()

    try:
        logger.info(f"–ö–æ–ª–±—ç–∫ –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {query.data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
        if query.data == "buycancel":
            query.message.reply_text("üö´ –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
            for key in list(context.user_data.keys()):
                if key.startswith('buying_crypto_') or key == 'max_crypto_amount':
                    del context.user_data[key]
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–±—ç–∫ –ø—Ä–æ–¥–∞–∂–∏
        if query.data.startswith("sell_"):
            sell_crypto_handler(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
        elif query.data.startswith("buyconfirm_"):
            # –î–∞–Ω–Ω—ã–π –±–ª–æ–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –≤–µ—Ç–∫–æ–π –Ω–∏–∂–µ
            pass

        user = get_user(query.from_user.id)
        if not user:
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id}")
            query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
        if query.data == "show_portfolio":
            show_portfolio(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        if query.data.startswith("buy_"):
            if query.data == "buy_more_crypto":
                show_available_cryptos(update, context)
                return

            crypto_id = int(query.data.split('_')[1])
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} –≤—ã–±—Ä–∞–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É ID: {crypto_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
            with get_db() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT id, name, symbol, rate, available_supply FROM cryptocurrencies WHERE id = ?", (crypto_id,))
                crypto = cursor.fetchone()
                if not crypto:
                    query.message.reply_text("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    return

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
            context.user_data['buying_crypto_id'] = crypto_id
            context.user_data['buying_crypto_name'] = crypto['name']
            context.user_data['buying_crypto_symbol'] = crypto['symbol']
            context.user_data['buying_crypto_rate'] = crypto['rate']

            message = f"üõí –ü–æ–∫—É–ø–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n\n"
            message += f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {crypto['name']} ({crypto['symbol']})\n"
            message += f"–ö—É—Ä—Å: {format_money(crypto['rate'])}‚ÇΩ\n"
            message += f"–í–∞—à –±–∞–ª–∞–Ω—Å: {format_money(user['balance'])}‚ÇΩ\n\n"

            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            max_affordable = user['balance'] / crypto['rate']
            max_available = crypto['available_supply']
            max_possible = min(max_affordable, max_available)

            context.user_data['max_crypto_amount'] = max_possible

            message += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {format_crypto_amount(max_possible)} {crypto['symbol']}\n\n"
            message += "üí≠ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
            keyboard = []

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
            percentages = [10, 25, 50, 75, 100]
            keyboard_row = []

            for percent in percentages:
                amount = max_possible * (percent / 100)
                if amount > 0:
                    keyboard_row.append(InlineKeyboardButton(
                        f"{percent}% ({format_crypto_amount(amount)})",
                        callback_data=f"buyamt_{crypto_id}_{amount:.8f}"
                    ))

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
                if len(keyboard_row) == 3 or percent == percentages[-1]:
                    keyboard.append(keyboard_row)
                    keyboard_row = []

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="buycancel")])

            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text(message, reply_markup=reply_markup)
            logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏
        elif query.data.startswith("buyamt_"):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ
            _, crypto_id, amount_str = query.data.split('_')
            crypto_id = int(crypto_id)
            amount = float(amount_str)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if 'buying_crypto_id' not in context.user_data or context.user_data['buying_crypto_id'] != crypto_id:
                query.message.reply_text("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –ø–æ–∫—É–ø–∫–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return

            crypto_name = context.user_data['buying_crypto_name']
            crypto_symbol = context.user_data['buying_crypto_symbol']
            crypto_rate = context.user_data['buying_crypto_rate']
            max_amount = context.user_data.get('max_crypto_amount', 0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
            if amount > max_amount:
                query.message.reply_text(
                    f"–û—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ({format_crypto_amount(amount)}) "
                    f"–ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–µ ({format_crypto_amount(max_amount)})."
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥—Å—Ç–≤
            total_cost = amount * crypto_rate
            if total_cost > user['balance']:
                query.message.reply_text(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {format_money(total_cost)}‚ÇΩ, "
                    f"—É –≤–∞—Å: {format_money(user['balance'])}‚ÇΩ"
                )
                return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–æ–∫–∞–∑–æ–º –¥–µ—Ç–∞–ª–µ–π –ø–æ–∫—É–ø–∫–∏
            message = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏\n\n"
            message += f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {crypto_name} ({crypto_symbol})\n"
            message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {format_crypto_amount(amount)} {crypto_symbol}\n"
            message += f"–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {format_money(crypto_rate)}‚ÇΩ\n"
            message += f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {format_money(total_cost)}‚ÇΩ\n\n"
            message += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ:"

            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"buyconfirm_{crypto_id}_{amount:.8f}"),
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="buycancel")
                ]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text(message, reply_markup=reply_markup)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
        elif query.data.startswith("buyconfirm_"):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ
            _, crypto_id, amount_str = query.data.split('_')
            crypto_id = int(crypto_id)
            amount = float(amount_str)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = get_user(query.from_user.id)
            if not user:
                query.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            if 'buying_crypto_id' not in context.user_data:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î, –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                crypto = get_crypto_by_id(crypto_id)
                if not crypto:
                    query.message.reply_text("–û—à–∏–±–∫–∞: –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                    return

                crypto_symbol = crypto['symbol']
                crypto_rate = crypto['rate']
            else:
                crypto_symbol = context.user_data.get('buying_crypto_symbol', 'Unknown')
                crypto_rate = context.user_data.get('buying_crypto_rate', 0)

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            total_cost = amount * crypto_rate

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥—Å—Ç–≤
            if total_cost > user['balance']:
                query.message.reply_text(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {format_money(total_cost)}‚ÇΩ, "
                    f"—É –≤–∞—Å: {format_money(user['balance'])}‚ÇΩ"
                )
                return

            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} –ø—ã—Ç–∞–µ—Ç—Å—è –∫—É–ø–∏—Ç—å {amount} {crypto_symbol} –∑–∞ {total_cost}‚ÇΩ")
            if buy_crypto(user['user_id'], crypto_id, amount):
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                updated_user = get_user(user['user_id'])
                logger.info(f"–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {updated_user['balance']}‚ÇΩ")

                query.message.reply_text(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!\n\n"
                    f"–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {format_crypto_amount(amount)} {crypto_symbol} "
                    f"–Ω–∞ —Å—É–º–º—É {format_money(total_cost)}‚ÇΩ\n\n"
                    f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_money(updated_user['balance'])}‚ÇΩ"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å
                keyboard = [
                    [InlineKeyboardButton("üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="show_portfolio")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.message.reply_text(
                    "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å?",
                    reply_markup=reply_markup
                )
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: user_id={user['user_id']}, crypto_id={crypto_id}, amount={amount}")
                query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã."
                )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
            for key in list(context.user_data.keys()):
                if key.startswith('buying_crypto_') or key == 'max_crypto_amount':
                    del context.user_data[key]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        elif query.data == "show_portfolio":
            show_portfolio(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–±—ç–∫–∞ –ø–æ–∫—É–ø–∫–∏: {str(e)}")
        logger.exception("–ü–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."
        )

def sell_crypto_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    logger.info("Called sell_crypto_handler")
    query = update.callback_query
    query.answer()

    user = get_user(query.from_user.id)
    if not user:
        logger.warning(f"Unauthorized access attempt from user {query.from_user.id}")
        query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ callback_data
        crypto_id = int(query.data.split('_')[1])
        logger.info(f"User {user['user_id']} selected crypto ID: {crypto_id} for selling")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        crypto = get_crypto_by_id(crypto_id)
        if not crypto:
            logger.error(f"Cryptocurrency with ID {crypto_id} not found")
            query.message.reply_text("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT amount FROM portfolios 
                WHERE user_id = ? AND crypto_id = ?
            """, (user['user_id'], crypto_id))
            portfolio = cursor.fetchone()

        if not portfolio or portfolio['amount'] <= 0:
            logger.warning(f"User {user['user_id']} attempted to sell crypto {crypto_id} but has no balance")
            query.message.reply_text(
                f"–£ –≤–∞—Å –Ω–µ—Ç {crypto['symbol']} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏."
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['selling_crypto_id'] = crypto_id
        context.user_data['selling_crypto_name'] = crypto['name']
        context.user_data['selling_crypto_symbol'] = crypto['symbol']
        context.user_data['selling_crypto_rate'] = crypto['rate']
        context.user_data['max_sell_amount'] = portfolio['amount']

        logger.info(f"User {user['user_id']} can sell up to {portfolio['amount']} {crypto['symbol']}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üí∞ –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n\n"
        message += f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {crypto['name']} ({crypto['symbol']})\n"
        message += f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {format_money(crypto['rate'])}‚ÇΩ\n"
        message += f"–£ –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏: {format_crypto_amount(portfolio['amount'])} {crypto['symbol']}\n\n"
        message += "üí≠ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
        keyboard = []
        percentages = [10, 25, 50, 75, 100]
        keyboard_row = []

        for percent in percentages:
            amount = portfolio['amount'] * (percent / 100)
            if amount > 0:
                keyboard_row.append(InlineKeyboardButton(
                    f"{percent}% ({format_crypto_amount(amount)})",
                    callback_data=f"sellamt_{crypto_id}_{amount:.8f}"
                ))

            if len(keyboard_row) == 3 or percent == percentages[-1]:
                keyboard.append(keyboard_row)
                keyboard_row = []

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sellcancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(message, reply_markup=reply_markup)
        logger.info(f"Sell menu shown to user {user['user_id']}")

    except Exception as e:
        logger.error(f"Error in sell_crypto_handler: {str(e)}")
        logger.exception("Full error details:")
        query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def process_crypto_sell_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    query = update.callback_query
    logger.info(f"Received callback query: {query.data}")

    try:
        if not query.data:
            logger.error("Empty callback data received")
            return

        logger.info(f"Processing sell callback with data: {query.data}")
        query.answer()

        # First check for cancellation
        if query.data == "sellcancel":
            logger.info("User cancelled the sell operation")
            query.message.reply_text("üö´ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            context.user_data.clear()
            return

        # Handle portfolio view request
        if query.data == "show_portfolio":
            logger.info("User requested to view portfolio")
            show_portfolio(update, context)
            return

        # Get user information
        user = get_user(query.from_user.id)
        if not user:
            logger.warning(f"Unauthorized access attempt from user {query.from_user.id}")
            query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
            return

        # Process sell amount selection
        if query.data.startswith("sell_"):
            crypto_id = int(query.data.split('_')[1])
            logger.info(f"User {user['user_id']} initiating sale of crypto {crypto_id}")

            # Get crypto details
            crypto = get_crypto_by_id(crypto_id)
            if not crypto:
                logger.error(f"Cryptocurrency {crypto_id} not found")
                query.message.reply_text("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # Get user's portfolio
            with get_db() as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT amount FROM portfolios 
                    WHERE user_id = ? AND crypto_id = ?
                """, (user['user_id'], crypto_id))
                portfolio = cursor.fetchone()

            if not portfolio or portfolio['amount'] <= 0:
                logger.warning(f"User {user['user_id']} has no {crypto['symbol']} to sell")
                query.message.reply_text(
                    f"–£ –≤–∞—Å –Ω–µ—Ç {crypto['symbol']} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏."
                )
                return

            # Store sale context
            context.user_data.update({
                'selling_crypto_id': crypto_id,
                'selling_crypto_name': crypto['name'],
                'selling_crypto_symbol': crypto['symbol'],
                'selling_crypto_rate': crypto['rate'],
                'max_sell_amount': portfolio['amount']
            })

            # Show sell menu
            show_sell_menu(update, context, crypto, portfolio['amount'])
            return

        # Handle amount selection
        if query.data.startswith("sellamt_"):
            handle_sell_amount_selection(update, context)
            return

        # Handle sale confirmation
        if query.data.startswith("sellconfirm_"):
            handle_sell_confirmation(update, context)
            return

    except Exception as e:
        logger.error(f"Error in process_crypto_sell_callback: {str(e)}")
        logger.exception("Full error details:")
        query.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        context.user_data.clear()

def show_sell_menu(update: Update, context: CallbackContext, crypto: Dict, available_amount: float):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø—Ä–æ–¥–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    query = update.callback_query

    message = f"üí∞ –ü—Ä–æ–¥–∞–∂–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n\n"
    message += f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {crypto['name']} ({crypto['symbol']})\n"
    message += f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {format_money(crypto['rate'])}‚ÇΩ\n"
    message += f"–£ –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏: {format_crypto_amount(available_amount)} {crypto['symbol']}\n\n"
    message += "üí≠ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:"

    # Create buttons for percentage selection
    keyboard = []
    percentages = [10, 25, 50, 75, 100]
    keyboard_row = []

    for percent in percentages:
        amount = available_amount * (percent / 100)
        if amount > 0:
            keyboard_row.append(InlineKeyboardButton(
                f"{percent}% ({format_crypto_amount(amount)})",
                callback_data=f"sellamt_{crypto['id']}_{amount:.8f}"
            ))

        if len(keyboard_row) == 3 or percent == percentages[-1]:
            keyboard.append(keyboard_row)
            keyboard_row = []

    # Add cancel button
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sellcancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.message.reply_text(message, reply_markup=reply_markup)
    logger.info(f"Sell menu shown for crypto {crypto['id']}")

def handle_sell_amount_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
    query = update.callback_query

    try:
        _, crypto_id, amount_str = query.data.split('_')
        crypto_id = int(crypto_id)
        amount = float(amount_str)

        if 'selling_crypto_id' not in context.user_data:
            logger.error(f"Missing selling context for user {query.from_user.id}")
            query.message.reply_text("–û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –ø—Ä–æ–¥–∞–∂–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

        if amount > context.user_data['max_sell_amount']:
            logger.warning(f"Attempted to sell more than available: {amount} > {context.user_data['max_sell_amount']}")
            query.message.reply_text(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ: "
                f"{format_crypto_amount(context.user_data['max_sell_amount'])} "
                f"{context.user_data['selling_crypto_symbol']}"
            )
            return

        # Calculate sale value
        sale_value = amount * context.user_data['selling_crypto_rate']

        # Show confirmation message
        message = f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏\n\n"
        message += f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {context.user_data['selling_crypto_name']} ({context.user_data['selling_crypto_symbol']})\n"
        message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {format_crypto_amount(amount)} {context.user_data['selling_crypto_symbol']}\n"
        message += f"–ö—É—Ä—Å: {format_money(context.user_data['selling_crypto_rate'])}‚ÇΩ\n"
        message += f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ: {format_money(sale_value)}‚ÇΩ\n\n"
        message += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ–¥–∞–∂—É:"

        keyboard = [[
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"sellconfirm_{crypto_id}_{amount:.8f}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="sellcancel")
        ]]

        reply_markup = InlineKeyboardMarkup(keyboard)
        query.message.reply_text(message, reply_markup=reply_markup)
        logger.info(f"Sale confirmation requested for {amount} of crypto {crypto_id}")

    except Exception as e:
        logger.error(f"Error in handle_sell_amount_selection: {str(e)}")
        logger.exception("Full error details:")
        query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        context.user_data.clear()

def handle_sell_confirmation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    query = update.callback_query

    try:
        _, crypto_id, amount_str = query.data.split('_')
        crypto_id = int(crypto_id)
        amount = float(amount_str)

        user = get_user(query.from_user.id)
        if not user:
            logger.error(f"User not found: {query.from_user.id}")
            query.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        logger.info(f"Processing sale confirmation: {amount} of crypto {crypto_id} for user {user['user_id']}")

        if sell_crypto(user['user_id'], crypto_id, amount):
            # Get updated user balance
            updated_user = get_user(user['user_id'])
            sale_value = amount * context.user_data['selling_crypto_rate']

            query.message.reply_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞!\n\n"
                f"–ü—Ä–æ–¥–∞–Ω–æ: {format_crypto_amount(amount)} {context.user_data['selling_crypto_symbol']}\n"
                f"–ü–æ–ª—É—á–µ–Ω–æ: {format_money(sale_value)}‚ÇΩ\n\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_money(updated_user['balance'])}‚ÇΩ"
            )

            # Offer to view updated portfolio
            keyboard = [[InlineKeyboardButton("üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="show_portfolio")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å?",
                reply_markup=reply_markup
            )
        else:
            logger.error(f"Failed to sell crypto {crypto_id} for user {user['user_id']}")
            query.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    except Exception as e:
        logger.error(f"Error in handle_sell_confirmation: {str(e)}")
        logger.exception("Full error details:")
        query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        context.user_data.clear()

def show_portfolio(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info("Called show_portfolio")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if update.callback_query:
        message = update.callback_query.message
        update.callback_query.answer()
    else:
        message = update.message

    user = get_user(message.chat.id)
    if not user:
        logger.warning(f"Unauthorized access attempt from user {message.chat.id}")
        message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT p.*, c.name, c.symbol, c.rate
                FROM portfolios p
                JOIN cryptocurrencies c ON p.crypto_id = c.id
                WHERE p.user_id = ? AND p.amount > 0
            """, (user['user_id'],))
            portfolio = cursor.fetchall()

        if not portfolio:
            logger.info(f"Empty portfolio for user {user['user_id']}")
            message.reply_text("–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üè¶ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        text = "üìä –í–∞—à –∫—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å:\n\n"
        total_value = 0
        keyboard = []

        for item in portfolio:
            value = item['amount'] * item['rate']
            total_value += value

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
            text += (
                f"‚Ä¢ {item['name']} ({item['symbol']})\n"
                f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {format_crypto_amount(item['amount'])} {item['symbol']}\n"
                f"  –ö—É—Ä—Å: {format_money(item['rate'])}‚ÇΩ\n"
                f"  –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_money(value)}‚ÇΩ\n\n"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            row = [
                InlineKeyboardButton(
                    f"üìà –ì—Ä–∞—Ñ–∏–∫ {item['symbol']}", 
                    callback_data=f"chart_{item['crypto_id']}"
                ),
                InlineKeyboardButton(
                    f"üí∞ –ü—Ä–æ–¥–∞—Ç—å {item['symbol']}", 
                    callback_data=f"sell_{item['crypto_id']}"
                )
            ]
            keyboard.append(row)

        text += f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: {format_money(total_value)}‚ÇΩ"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        keyboard.append([
            InlineKeyboardButton(
                "üõí –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", 
                callback_data="buy_more_crypto"
            )
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)
        message.reply_text(text, reply_markup=reply_markup)
        logger.info(f"Portfolio shown to user {user['user_id']}, total value: {total_value}")

    except Exception as e:
        logger.error(f"Error showing portfolio: {str(e)}")
        logger.exception("Full error details:")
        message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def show_graph(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    query = update.callback_query
    query.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–∑ callback_data
        crypto_id = int(query.data.split('_')[1])
        logger.info(f"–ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ID: {crypto_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        crypto = get_crypto_by_id(crypto_id)
        if not crypto:
            logger.warning(f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {crypto_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            query.message.reply_text("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {crypto['name']} ({crypto['symbol']})")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        chart_base64 = generate_price_graph(crypto_id, crypto['name'], crypto['symbol'])

        if not chart_base64:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {crypto['symbol']}")
            query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        price_history = get_price_history(crypto_id, days=30)

        if price_history:
            first_price = price_history[0]['rate']
            last_price = price_history[-1]['rate']
            logger.info(f"–¶–µ–Ω–∞ {crypto['symbol']}: –Ω–∞—á–∞–ª—å–Ω–∞—è={first_price}, —Ç–µ–∫—É—â–∞—è={last_price}")

            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            price_change_pct = ((last_price - first_price) / first_price) * 100
            logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {crypto['symbol']}: {price_change_pct:+.2f}%")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            if price_change_pct > 0:
                emoji = "üü¢"
            elif price_change_pct < 0:
                emoji = "üî¥"
            else:
                emoji = "‚ö™"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –≥—Ä–∞—Ñ–∏–∫—É
            caption = (
                f"üìä {crypto['name']} ({crypto['symbol']})\n\n"
                f"{emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {price_change_pct:+.2f}%\n"
                f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {format_money(first_price)}\n"
                f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {format_money(last_price)}\n\n"
                f"–î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
            )
        else:
            caption = f"üìä –ì—Ä–∞—Ñ–∏–∫ {crypto['name']} ({crypto['symbol']})"
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã {crypto['symbol']}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        import io
        import base64
        image_data = base64.b64decode(chart_base64)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è {crypto['symbol']}")
        query.message.reply_photo(
            photo=io.BytesIO(image_data),
            caption=caption
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
        logger.exception("–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
        query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.")

def generate_price_graph(crypto_id: int, crypto_name: str, crypto_symbol: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
    :return: base64 —Å—Ç—Ä–æ–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
    """
    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {crypto_symbol}")
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        price_history = get_price_history(crypto_id, days=30)

        if not price_history:
            logger.warning(f"No price history found for crypto {crypto_id}")
            return None

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        dates = []
        prices = []
        for record in price_history:
            try:
                # SQLite –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
                date = datetime.strptime(record['timestamp'], '%Y-%m-%d %H:%M:%S')
                price = float(record['rate'])
                dates.append(date)
                prices.append(price)
                logger.debug(f"Processed data point: date={date}, price={price}")
            except (ValueError, KeyError) as e:
                logger.error(f"Error parsing record {record}: {e}")
                continue

        if not dates or not prices:
            logger.error("No valid data points for graph")
            return None

        logger.info(f"–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑ {len(dates)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.plot(dates, prices, marker='o', linestyle='-', linewidth=2, markersize=4)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
        plt.title(f'–î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞ {crypto_name} ({crypto_symbol})')
        plt.xlabel('–î–∞—Ç–∞')
        plt.ylabel('–ö—É—Ä—Å (‚ÇΩ)')
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.xticks(rotation=45)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–∏
        from matplotlib.dates import DateFormatter
        plt.gca().xaxis.set_major_formatter(DateFormatter('%d.%m'))
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ base64
        import io
        import base64
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
        plt.close()
        buf.seek(0)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        graph_base64 = base64.b64encode(buf.getvalue()).decode()
        logger.info("–ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ base64")
        return graph_base64

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        logger.exception("–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
        return None

def show_available_cryptos(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    logger.info("–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è show_available_cryptos")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –≤—ã–∑–≤–∞–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–ª–±—ç–∫–∞
        if update.callback_query:
            query = update.callback_query
            query.answer()
            user_id = query.from_user.id
            send_message = query.message.reply_text
        else:
            user_id = update.effective_user.id
            send_message = update.message.reply_text

        user = get_user(user_id)
        if not user:
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            send_message("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
            return

        logger.info(f"–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}")

        with get_db() as conn:
            cursor = conn.cursor()
            sql_query = """
                SELECT id, name, symbol, rate, available_supply 
                FROM cryptocurrencies 
                WHERE available_supply > 0
                ORDER BY name
            """
            logger.debug(f"–í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å: {sql_query}")
            cursor.execute(sql_query)
            cryptos = cursor.fetchall()

        if not cryptos:
            logger.warning("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            send_message("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(cryptos)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")

        message = "ü™ô –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:\n\n"
        keyboard = []

        for crypto in cryptos:
            logger.debug(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {crypto['name']}")
            message += f"{crypto['name']} ({crypto['symbol']}): {format_money(crypto['rate'])}‚ÇΩ\n"
            message += f"–î–æ—Å—Ç—É–ø–Ω–æ: {format_crypto_amount(crypto['available_supply'])}\n\n"
            keyboard.append([InlineKeyboardButton(
                f"–ö—É–ø–∏—Ç—å {crypto['symbol']}", 
                callback_data=f"buy_{crypto['id']}"
            )])
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è {crypto['symbol']} —Å callback_data: buy_{crypto['id']}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        keyboard.append([InlineKeyboardButton("üìä –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", callback_data="show_portfolio")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π {len(message)} —Å–∏–º–≤–æ–ª–æ–≤ –∏ {len(keyboard)} –∫–Ω–æ–ø–æ–∫")

        send_message(message, reply_markup=reply_markup)
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {str(e)}")
        logger.exception("–ü–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        if update.callback_query:
            update.callback_query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        else:
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )