from telegram import Update
from telegram.ext import ContextTypes
from database import db
from crypto_utils import crypto_api
from config import ADMIN_IDS, SUPPORTED_CRYPTO
from logger import logger

# Admin commands
async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Get bot statistics - admin only"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ admin_stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            try:
                # Get total users
                cursor.execute("SELECT COUNT(*) FROM users")
                total_users = cursor.fetchone()[0]

                # Get total transactions
                cursor.execute("SELECT COUNT(*) FROM transactions")
                total_transactions = cursor.fetchone()[0]

                stats_message = (
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
                    f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                    f"–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_transactions}"
                )

                await update.message.reply_text(stats_message)
            finally:
                cursor.close()
    except Exception as e:
        logger.error(f"Error in admin_stats: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

# User commands
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Simple ping command for testing"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ping –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    await update.message.reply_text("pong! üèì")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start command - introduces the bot"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    user = update.effective_user
    db.add_user(
        user.id,
        user.username,
        user.first_name,
        user.last_name
    )

    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç {user.first_name}! üöÄ\n\n"
        "–Ø –≤–∞—à –ö—Ä–∏–ø—Ç–æ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "/price <crypto> - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É\n"
        "/wallet - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏\n"
        "/add_wallet <crypto> <address> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
    )

    await update.message.reply_text(welcome_message)

async def get_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Get current price for cryptocurrency"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ price –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, /price BTC)")
        return

    crypto = context.args[0].upper()
    if crypto not in SUPPORTED_CRYPTO:
        await update.message.reply_text(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(SUPPORTED_CRYPTO.keys())}")
        return

    price = crypto_api.get_price(crypto)
    if price:
        await update.message.reply_text(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {crypto}: ${price:,.2f}")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def view_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """View user's wallets"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ wallet –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    user_id = update.effective_user.id
    wallets = db.get_user_wallets(user_id)

    if not wallets:
        await update.message.reply_text("–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_wallet —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.")
        return

    wallet_message = "–í–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏:\n\n"
    for wallet in wallets:
        price = crypto_api.get_price(wallet['crypto'])
        usd_value = price * wallet['balance'] if price else 0
        wallet_message += (
            f"üîπ {wallet['crypto']}:\n"
            f"–ê–¥—Ä–µ—Å: {wallet['address']}\n"
            f"–ë–∞–ª–∞–Ω—Å: {wallet['balance']} ({usd_value:,.2f} USD)\n\n"
        )

    await update.message.reply_text(wallet_message)

async def add_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add new wallet"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ add_wallet –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_wallet <crypto> <address>")
        return

    crypto, address = context.args[0].upper(), context.args[1]

    if crypto not in SUPPORTED_CRYPTO:
        await update.message.reply_text(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ: {', '.join(SUPPORTED_CRYPTO.keys())}")
        return

    if not crypto_api.validate_address(crypto, address):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞.")
        return

    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            try:
                cursor.execute('''
                    INSERT INTO wallets (user_id, crypto_currency, address)
                    VALUES (?, ?, ?)
                ''', (update.effective_user.id, crypto, address))
                conn.commit()
                await update.message.reply_text(f"–ö–æ—à–µ–ª–µ–∫ –¥–ª—è {crypto} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            finally:
                cursor.close()
    except Exception as e:
        logger.error(f"Error adding wallet: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show help message"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    help_message = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö:\n"
        "/price <crypto> - –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É\n\n"
        "üëõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏:\n"
        "/wallet - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∫–æ—à–µ–ª—å–∫–∏\n"
        "/add_wallet <crypto> <address> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫\n\n"
        "‚ÑπÔ∏è –î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {', '.join(SUPPORTED_CRYPTO.keys())}"
    )

    await update.message.reply_text(help_message)