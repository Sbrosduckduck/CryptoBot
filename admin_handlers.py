import logging
import os
import io
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import numpy as np
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, Filters
from database import (
    get_db, get_all_cryptos, get_user, add_crypto,
    update_crypto, validate_crypto_symbol, get_crypto_by_id,
    get_pending_transactions, update_transaction_status, update_user_balance
)
from utils import (
    is_admin, format_money, format_crypto_amount
)
from config import ADMIN_EMAIL

# Configuration constants
logger = logging.getLogger(__name__)

# Admin menu buttons configuration

# Conversation handler states
ADD_CRYPTO_NAME, ADD_CRYPTO_SYMBOL, ADD_CRYPTO_RATE, ADD_CRYPTO_SUPPLY = range(4)
EDIT_CRYPTO_SELECT, EDIT_CRYPTO_ACTION, EDIT_CRYPTO_RATE, EDIT_CRYPTO_SUPPLY = range(4, 8)

def check_admin(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    def wrapper(update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        logger.info(f"Admin check for user {user_id}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user = get_user(user_id)
            logger.debug(f"User data: {user}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if not is_admin(user_id):
                logger.warning(f"Unauthorized admin access attempt from user {user_id}")
                update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                return

            logger.info(f"Admin access granted for user {user_id}")
            return func(update, context)

        except Exception as e:
            logger.error(f"Error in admin check: {str(e)}")
            update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
    return wrapper

@check_admin
def admin_stats(update: Update, context: CallbackContext):
    """Shows detailed system statistics for admins"""
    try:
        logger.info(f"Starting admin_stats for user {update.effective_user.id}")

        logger.info("Admin check passed, getting database connection")

        with get_db() as conn:
            cursor = conn.cursor()

            logger.info("Getting user statistics")
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_query = '''
                SELECT 
                    COUNT(*) as total_users,
                    COUNT(CASE WHEN DATE(created_at) = DATE('now') THEN 1 END) as new_today,
                    COALESCE(SUM(balance), 0) as total_balance,
                    COUNT(CASE WHEN created_at >= datetime('now', '-7 days') THEN 1 END) as active_users
                FROM users
            '''
            logger.debug(f"Executing user query: {user_query}")
            cursor.execute(user_query)
            user_stats = cursor.fetchone()
            logger.debug(f"User stats: {user_stats}")

            logger.info("Getting trading statistics")
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            trade_query = '''
                SELECT 
                    COUNT(*) as total_trades,
                    COALESCE(SUM(amount), 0) as total_volume_rub,
                    COUNT(DISTINCT user_id) as unique_traders
                FROM transactions
                WHERE created_at >= datetime('now', '-30 days')
            '''
            logger.debug(f"Executing trade query: {trade_query}")
            cursor.execute(trade_query)
            trade_stats = cursor.fetchone()
            logger.debug(f"Trade stats: {trade_stats}")

            logger.info("Getting cryptocurrency distribution")
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            crypto_query = '''
                SELECT c.name, c.symbol, COUNT(p.crypto_id) as trade_count, 
                       COALESCE(SUM(p.amount * c.rate), 0) as volume_rub
                FROM cryptocurrencies c
                LEFT JOIN portfolios p ON c.id = p.crypto_id
                GROUP BY c.id
                ORDER BY volume_rub DESC
                LIMIT 5
            '''
            logger.debug(f"Executing crypto query: {crypto_query}")
            cursor.execute(crypto_query)
            top_cryptos = cursor.fetchall()
            logger.debug(f"Top cryptos: {top_cryptos}")

            logger.info("Getting user growth data")
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            growth_query = '''
                SELECT DATE(created_at) as date, COUNT(*) as count
                FROM users
                WHERE created_at >= datetime('now', '-7 days')
                GROUP BY DATE(created_at)
                ORDER BY date
            '''
            logger.debug(f"Executing growth query: {growth_query}")
            cursor.execute(growth_query)
            growth_data = cursor.fetchall()
            logger.debug(f"Growth data: {growth_data}")

            try:
                logger.info("Creating growth chart")
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                plt.figure(figsize=(10, 5))

                if growth_data:
                    logger.debug("Processing growth data for chart")
                    dates = [row[0] for row in growth_data]
                    counts = [row[1] for row in growth_data]
                    logger.debug(f"Chart data - dates: {dates}, counts: {counts}")

                    plt.plot(dates, counts, marker='o')
                    plt.title('–†–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π')
                    plt.xlabel('–î–∞—Ç–∞')
                    plt.ylabel('–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')
                    plt.grid(True)
                    plt.xticks(rotation=45)
                else:
                    logger.warning("No growth data available for chart")
                    plt.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ö', 
                            horizontalalignment='center',
                            verticalalignment='center')

                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                os.makedirs('static', exist_ok=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                growth_chart_path = 'static/user_growth.png'
                logger.debug(f"Saving chart to {growth_chart_path}")
                plt.savefig(growth_chart_path, bbox_inches='tight')
                plt.close()
                logger.info(f"Chart saved to {growth_chart_path}")

            except Exception as chart_error:
                logger.error(f"Error creating chart: {str(chart_error)}")
                logger.exception("Full chart error details:")
                plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

            logger.info("Formatting statistics message")
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_message = (
                "üìä *–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
                "*üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            )

            if user_stats:
                stats_message += (
                    f"‚Ä¢ –í—Å–µ–≥–æ: {user_stats[0]:,}\n"
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {user_stats[3]:,}\n"
                    f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {user_stats[1]:,}\n"
                    f"‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {format_money(user_stats[2])}\n\n"
                )
            else:
                stats_message += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö\n\n"

            stats_message += "*üíπ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (30 –¥–Ω–µ–π):*\n"

            if trade_stats:
                stats_message += (
                    f"‚Ä¢ –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {format_money(trade_stats[1])}\n"
                    f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {trade_stats[0]:,}\n"
                    f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤: {trade_stats[2]:,}\n\n"
                )
            else:
                stats_message += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ—Ä–≥–∞—Ö\n\n"

            stats_message += "*üîù –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –æ–±—ä–µ–º—É:*\n"

            if top_cryptos:
                for crypto in top_cryptos:
                    stats_message += (
                        f"‚Ä¢ {crypto[0]} ({crypto[1]})\n"
                        f"  –û–±—ä–µ–º: {format_money(crypto[3])}\n"
                        f"  –°–¥–µ–ª–æ–∫: {crypto[2]:,}\n"
                    )
            else:
                stats_message += "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö\n"

            logger.info("Sending statistics message")
            logger.debug(f"Stats message content: {stats_message}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            update.message.reply_text(stats_message, parse_mode='Markdown')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            if os.path.exists(growth_chart_path):
                logger.info("Sending growth chart")
                try:
                    with open(growth_chart_path, 'rb') as photo:
                        update.message.reply_photo(
                            photo=photo,
                            caption="üìà –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
                        )
                    os.remove(growth_chart_path)
                    logger.info("Growth chart sent and removed")
                except Exception as photo_error:
                    logger.error(f"Error sending photo: {str(photo_error)}")
                    logger.exception("Full photo error details:")
            else:
                logger.warning(f"Growth chart file not found at {growth_chart_path}")

    except Exception as e:
        logger.error(f"Error generating admin statistics: {str(e)}")
        logger.exception("Full error details:")
        update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )
    finally:
        plt.close('all')  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏

def get_admin_buttons():
    """Returns admin buttons with pending count"""
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) as count FROM transactions WHERE status = 'pending'")
        pending_count = cursor.fetchone()['count']

    return [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
        ["üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", f"üì• –ó–∞—è–≤–∫–∏ ({pending_count})"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç—É", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç—É"],
        ["‚Ü©Ô∏è –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é"]
    ]

@check_admin
def admin_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    logger.info(f"Admin menu accessed by user {update.effective_user.id}")
    keyboard = ReplyKeyboardMarkup(get_admin_buttons(), resize_keyboard=True)
    update.message.reply_text(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n"
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–≤–æ–¥/–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "üì• –ó–∞—è–≤–∫–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç—É - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç—É - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n"
        "‚Ü©Ô∏è –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=keyboard
    )
    logger.debug("Admin menu displayed successfully")

@check_admin
def add_crypto_command(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    logger.info(f"Add crypto process started by admin {update.effective_user.id}")

    try:
        update.message.reply_text(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:"
        )
        logger.info("Admin prompted for crypto name")
        return ADD_CRYPTO_NAME
    except Exception as e:
        logger.error(f"Error in add_crypto_command: {e}")
        logger.exception("Full error details:")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.")
        return ConversationHandler.END

@check_admin
def edit_crypto_command(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    logger.info(f"Edit crypto process started by admin {update.effective_user.id}")
    cryptos = get_all_cryptos(include_private=True)

    if not cryptos:
        logger.warning("No cryptocurrencies available for editing")
        update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return ConversationHandler.END

    keyboard = []
    for crypto in cryptos:
        button = InlineKeyboardButton(
            f"{crypto['name']} ({crypto['symbol']}) - {format_money(crypto['rate'])}",
            callback_data=f"edit_crypto_{crypto['id']}"
        )
        keyboard.append([button])

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )
    logger.debug(f"Edit crypto menu displayed with {len(cryptos)} options")
    return EDIT_CRYPTO_SELECT

@check_admin
def show_users(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info(f"User list requested by admin {update.effective_user.id}")

    try:
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM users ORDER BY created_at DESC')
            users = cursor.fetchall()

        if not users:
            logger.warning("No users found in database")
            update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        message = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            user_name = f"{user['first_name']} {user['last_name']}"
            user_link = f"[{user_name}](tg://user?id={user['user_id']})"
            phone = user['phone'] if user['phone'] else '–ù–µ —É–∫–∞–∑–∞–Ω'
            balance = format_money(user['balance']) if user['balance'] else '0‚ÇΩ'
            message += f"‚Ä¢ {user_link}\nüì± {phone}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}\n\n"

        update.message.reply_text(message, parse_mode='Markdown')
        logger.info(f"User list displayed: {len(users)} users")

    except Exception as e:
        logger.error(f"Error showing users: {str(e)}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


# Add new function to view transactions
@check_admin
def view_transactions(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info(f"Transactions view accessed by admin {update.effective_user.id}")

    try:
        with get_db() as conn:
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            cursor.execute('''
                SELECT t.*, u.first_name, u.last_name, u.email
                FROM transactions t
                JOIN users u ON t.user_id = u.user_id
                ORDER BY t.created_at DESC
                LIMIT 20
            ''')
            transactions = cursor.fetchall()

            logger.info(f"Retrieved {len(transactions) if transactions else 0} transactions from database")

        if not transactions:
            logger.info("No transactions found in database")
            update.message.reply_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        message = "üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
        for tx in transactions:
            try:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                status_emoji = {
                    'pending': '‚è≥',
                    'completed': '‚úÖ',
                    'rejected': '‚ùå'
                }.get(tx['status'], '‚ùì')

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
                type_text = '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' if tx['type'] == 'deposit' else '–≤—ã–≤–æ–¥'

                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
                try:
                    if isinstance(tx['created_at'], str):
                        created_at = datetime.strptime(tx['created_at'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
                    else:
                        created_at = datetime.fromtimestamp(float(tx['created_at'])).strftime('%d.%m.%Y %H:%M')
                except (TypeError, ValueError) as e:
                    logger.error(f"Error formatting timestamp for transaction {tx['id']}: {e}")
                    created_at = tx['created_at'] if tx['created_at'] else "–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                message += (
                    f"{status_emoji} {type_text.capitalize()}\n"
                    f"ID: #{tx['unique_id']}\n"
                    f"–û—Ç: {tx['first_name']} {tx['last_name']} ({tx['email']})\n"
                    f"–°—É–º–º–∞: {format_money(tx['amount'])}\n"
                    f"–°—Ç–∞—Ç—É—Å: {tx['status']}\n"
                    f"–°–æ–∑–¥–∞–Ω–æ: {created_at}\n\n"
                )

                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                if len(message) > 3500:  # Telegram limit is 4096
                    update.message.reply_text(message)
                    message = "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n"

            except Exception as e:
                logger.error(f"Error processing transaction {tx['id']}: {e}")
                continue

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if message:
            update.message.reply_text(message)
            logger.info("Successfully sent transactions list to admin")

    except Exception as e:
        logger.error(f"Error showing transactions: {str(e)}")
        logger.exception("Full error details:")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")

# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é view_pending_transactions –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@check_admin
def view_pending_transactions(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    logger.info(f"Pending transactions view accessed by admin {update.effective_user.id}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
        pending_transactions = get_pending_transactions()
        logger.debug(f"Found {len(pending_transactions)} pending transactions")

        if not pending_transactions:
            logger.info("No pending transactions found")
            update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
            return

        for tx in pending_transactions:
            logger.debug(f"Processing transaction {tx['id']}: {tx['type']} for {tx['amount']}")
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
            message = (
                f"{'üì•' if tx['type'] == 'deposit' else 'üì§'} "
                f"{'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' if tx['type'] == 'deposit' else '–í—ã–≤–æ–¥'}\n"
                f"–û—Ç: {tx['first_name']} {tx['last_name']}\n"
                f"Email: {tx['email']}\n"
                f"–°—É–º–º–∞: {format_money(tx['amount'])}\n"
                f"–°–æ–∑–¥–∞–Ω–æ: {tx['created_at']}\n"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{tx['id']}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{tx['id']}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            update.message.reply_text(message, reply_markup=reply_markup)
            logger.debug(f"Sent message for transaction {tx['id']}")

    except Exception as e:
        logger.error(f"Error showing pending transactions: {str(e)}")
        logger.exception("Full error details:")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫.")

@check_admin
def process_transaction(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    query.answer()

    logger.info(f"Processing transaction callback: {query.data}")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        action, tx_id = query.data.split('_')
        tx_id = int(tx_id)
        logger.info(f"Processing transaction {tx_id} with action {action}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT t.*, u.user_id, u.balance, u.first_name, u.last_name 
                FROM transactions t
                JOIN users u ON t.user_id = u.user_id
                WHERE t.id = ? AND t.status = ?
            """, (tx_id, 'pending'))
            tx = cursor.fetchone()

        if not tx:
            logger.warning(f"Transaction {tx_id} not found or already processed")
            query.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        logger.debug(f"Found transaction: {dict(tx)}")
        user_id = tx['user_id']
        amount = tx['amount']
        tx_type = tx['type']

        if action == 'approve':
            # Process approval
            logger.info(f"Approving transaction {tx_id}")
            success = update_transaction_status(tx_id, 'completed')

            if success:
                new_balance = tx['balance'] + amount if tx_type == 'deposit' else tx['balance'] - amount
                if update_user_balance(user_id, new_balance):
                    logger.info(f"Successfully processed {tx_type} for user {user_id}, new balance: {new_balance}")

                    # Notify user
                    context.bot.send_message(
                        user_id,
                        f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {'–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' if tx_type == 'deposit' else '–≤—ã–≤–æ–¥'} "
                        f"—Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—É–º–º—É {format_money(amount)} –æ–¥–æ–±—Ä–µ–Ω–∞.\n"
                        f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {format_money(new_balance)}"
                    )

                    query.edit_message_text(
                        f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {tx['first_name']} {tx['last_name']}\n"
                        f"–°—É–º–º–∞: {format_money(amount)}\n"
                        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {format_money(new_balance)}"
                    )
                else:
                    logger.error(f"Failed to update balance for user {user_id}")
                    query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            else:
                logger.error(f"Failed to update transaction status for tx_id {tx_id}")
                query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

        elif action == 'reject':
            logger.info(f"Rejecting transaction {tx_id}")
            if update_transaction_status(tx_id, 'rejected'):
                logger.info(f"Successfully rejected transaction {tx_id}")

                # Notify user
                context.bot.send_message(
                    user_id,
                    f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ {'–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' if tx_type == 'deposit' else '–≤—ã–≤–æ–¥'} "
                    f"—Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—É–º–º—É {format_money(amount)} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )

                query.edit_message_text(
                    f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {tx['first_name']} {tx['last_name']}\n"
                    f"–°—É–º–º–∞: {format_money(amount)}"
                )
            else:
                logger.error(f"Failed to reject transaction {tx_id}")
                query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

    except Exception as e:
        logger.error(f"Error processing transaction: {str(e)}")
        logger.exception("Full error details:")
        query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.")

# State definitions for conversation handlers
ADD_CRYPTO_NAME, ADD_CRYPTO_SYMBOL, ADD_CRYPTO_RATE, ADD_CRYPTO_SUPPLY = range(10, 14)
EDIT_CRYPTO_SELECT, EDIT_CRYPTO_RATE, EDIT_CRYPTO_SUPPLY = range(20, 23)

# Helper functions
def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
    update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END

# Add Crypto conversation handlers

def add_crypto_name(update: Update, context: CallbackContext):
    crypto_name = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM cryptocurrencies WHERE name = ?", (crypto_name,))
        existing_name = cursor.fetchone()

    if existing_name:
        update.message.reply_text(
            f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{crypto_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        return ADD_CRYPTO_NAME

    context.user_data['crypto_name'] = crypto_name
    update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (—Ñ–æ—Ä–º–∞—Ç: 3 –∑–∞–≥–ª–∞–≤–Ω—ã–µ + 1 —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: BTCd):"
    )
    return ADD_CRYPTO_SYMBOL

def add_crypto_symbol(update: Update, context: CallbackContext):
    symbol = update.message.text
    if not validate_crypto_symbol(symbol):
        update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ 1 —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCd). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return ADD_CRYPTO_SYMBOL

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞
    with get_db() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT symbol FROM cryptocurrencies WHERE symbol = ?", (symbol,))
        existing_symbol = cursor.fetchone()

    if existing_symbol:
        update.message.reply_text(
            f"–°–∏–º–≤–æ–ª {symbol} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª:"
        )
        return ADD_CRYPTO_SYMBOL

    context.user_data['crypto_symbol'] = symbol
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —Ä—É–±–ª—è—Ö:")
    return ADD_CRYPTO_RATE

def add_crypto_rate(update: Update, context: CallbackContext):
    try:
        rate = float(update.message.text.replace(',', '.'))
        if rate <= 0:
            raise ValueError("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        context.user_data['crypto_rate'] = rate

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:")
        return ADD_CRYPTO_SUPPLY
    except ValueError:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return ADD_CRYPTO_RATE

def add_crypto_supply(update: Update, context: CallbackContext):
    try:
        supply = float(update.message.text.replace(',', '.'))
        if supply <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        context.user_data['crypto_supply'] = supply
    except ValueError:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return ADD_CRYPTO_SUPPLY

    try:
        add_crypto(
            name=context.user_data['crypto_name'],
            symbol=context.user_data['crypto_symbol'],
            rate=context.user_data['crypto_rate'],
            total_supply=context.user_data['crypto_supply']
        )

        update.message.reply_text(
            f"–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {context.user_data['crypto_name']} ({context.user_data['crypto_symbol']}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
        )
    except Exception as e:
        update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {str(e)}")

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    return ConversationHandler.END

# Edit Crypto conversation handlers

def edit_crypto_select(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    query.answer()

    try:
        crypto_id = int(query.data.split("_")[-1])
        crypto = get_crypto_by_id(crypto_id, include_private=True)

        if not crypto:
            query.edit_message_text("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        context.user_data['crypto_id'] = crypto_id
        context.user_data['crypto_name'] = crypto.get('name', '')
        context.user_data['crypto_symbol'] = crypto.get('symbol', '')

        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å", callback_data="edit_rate")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_supply")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        message_text = (
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {crypto.get('name', '')} ({crypto.get('symbol', '')})\n\n"
            f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {format_money(crypto.get('rate', 0))}\n"
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {format_crypto_amount(crypto.get('total_supply', 0))}\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {format_crypto_amount(crypto.get('available_supply', 0))}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        query.edit_message_text(
            text=message_text,
            reply_markup=reply_markup
        )

        return EDIT_CRYPTO_SELECT

    except Exception as e:
        logger.error(f"Error in edit_crypto_select: {str(e)}")
        query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.")
        return ConversationHandler.END

def edit_crypto_action(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
    query = update.callback_query
    query.answer()

    try:
        if query.data == "cancel_edit":
            query.edit_message_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END

        crypto = get_crypto_by_id(context.user_data.get('crypto_id'), include_private=True)
        if not crypto:
            query.edit_message_text("–û—à–∏–±–∫–∞: –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        if query.data == "edit_rate":
            message_text = (
                f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è {context.user_data.get('crypto_name', '')} "
                f"({context.user_data.get('crypto_symbol', '')})\n\n"
                f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {format_money(crypto.get('rate', 0))}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100.50):"
            )
            query.edit_message_text(message_text)
            return EDIT_CRYPTO_RATE

        if query.data == "edit_supply":
            message_text = (
                f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç –¥–ª—è {context.user_data.get('crypto_name', '')} "
                f"({context.user_data.get('crypto_symbol', '')})\n\n"
                f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {format_crypto_amount(crypto.get('total_supply', 0))}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000000):"
            )
            query.edit_message_text(message_text)
            return EDIT_CRYPTO_SUPPLY

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in edit_crypto_action: {str(e)}")
        query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–µ–π—Å—Ç–≤–∏—è.")
        return ConversationHandler.END

def edit_crypto_rate(update: Update, context: CallbackContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    try:
        rate = float(update.message.text.replace(',', '.'))
        if rate <= 0:
            update.message.reply_text("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return EDIT_CRYPTO_RATE

        crypto_id = context.user_data.get('crypto_id')
        if not crypto_id:
            update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.")
            return ConversationHandler.END

        # Get current crypto info
        crypto = get_crypto_by_id(crypto_id, include_private=True)
        if not crypto:
            update.message.reply_text("–û—à–∏–±–∫–∞: –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        # Update the rate
        logger.info(f"Updating rate for crypto {crypto_id} to {rate}")
        success = update_crypto(
            crypto_id=crypto_id,
            rate=rate,  # Pass rate directly as float
            total_supply=crypto.get('total_supply'),  # Preserve existing supply
            available_supply=crypto.get('available_supply', 0)  # Default to 0 if None
        )

        if success:
            update.message.reply_text(
                f"–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"–ù–æ–≤—ã–π –∫—É—Ä—Å: {format_money(rate)}"
            )
        else:
            update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.")

        return ConversationHandler.END

    except ValueError:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return EDIT_CRYPTO_RATE
    except Exception as e:
        logger.error(f"Error in edit_crypto_rate: {str(e)}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞.")
        return ConversationHandler.END

def edit_crypto_supply(update: Update, context: CallbackContext):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    try:
        supply = float(update.message.text.replace(',', '.'))
        if supply <= 0:
            update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return EDIT_CRYPTO_SUPPLY

        crypto_id = context.user_data.get('crypto_id')
        if not crypto_id:
            update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.")
            return ConversationHandler.END

        # Get current crypto info
        crypto = get_crypto_by_id(crypto_id, include_private=True)
        if not crypto:
            update.message.reply_text("–û—à–∏–±–∫–∞: –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        current_rate = crypto.get('rate', 0)
        if current_rate is None:
            current_rate = 0

        # Update with new supply
        logger.info(f"Updating supply for crypto {crypto_id} to {supply}")
        success = update_crypto(
            crypto_id=crypto_id,
            rate=current_rate,
            total_supply=supply,
            available_supply=supply  # Set available supply equal to total supply
        )

        if success:
            update.message.reply_text(
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {format_crypto_amount(supply)}"
            )
        else:
            update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç.")

        return ConversationHandler.END

    except ValueError:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
        return EDIT_CRYPTO_SUPPLY
    except Exception as e:
        logger.error(f"Error in edit_crypto_supply: {str(e)}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç.")
        return ConversationHandler.END

def update_crypto_with_history(crypto_id, rate, total_supply=None, available_supply=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    try:
        with get_db() as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            cursor.execute("""
                SELECT rate, total_supply, available_supply
                FROM cryptocurrencies
                WHERE id = ?
            """, (crypto_id,))
            current = cursor.fetchone()

            if not current:
                return False

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É
            cursor.execute("""
                UPDATE cryptocurrencies
                SET rate = ?,
                    total_supply = ?,
                    available_supply = ?,
                    updated_at = datetime('now')
                WHERE id = ?
            """, (
                rate if rate is not None else current['rate'],
                total_supply if total_supply is not None else current['total_supply'],
                available_supply if available_supply is not None else current['available_supply'],
                crypto_id
            ))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
            cursor.execute("""
                INSERT INTO crypto_history (
                    crypto_id, old_rate, new_rate,
                    old_total_supply, new_total_supply,
                    old_available_supply, new_available_supply,
                    change_date
                ) VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now'))
            """, (
                crypto_id,
                current['rate'], rate if rate is not None else current['rate'],
                current['total_supply'], total_supply if total_supply is not None else current['total_supply'],
                current['available_supply'], available_supply if available_supply is not None else current['available_supply']
            ))

            conn.commit()
            return True

    except Exception as e:
        logger.error(f"Error updating crypto with history: {str(e)}")
        return False

# Define conversation handlers after all functions are defined
edit_crypto_handler = ConversationHandler(
    entry_points=[CommandHandler("edit_crypto", edit_crypto_command),
                  MessageHandler(Filters.regex(r"^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏–ø—Ç—É$"), edit_crypto_command)],
    states={
        EDIT_CRYPTO_SELECT: [
            CallbackQueryHandler(edit_crypto_select, pattern=r"^edit_crypto_\d+$"),
            CallbackQueryHandler(edit_crypto_action, pattern=r"^edit_(rate|supply|cancel_edit)$")
        ],
        EDIT_CRYPTO_RATE: [MessageHandler(Filters.text & ~Filters.command, edit_crypto_rate)],
        EDIT_CRYPTO_SUPPLY: [MessageHandler(Filters.text & ~Filters.command, edit_crypto_supply)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True
)

add_crypto_handler = ConversationHandler(
    entry_points=[
        CommandHandler('add_crypto', add_crypto_command),
        MessageHandler(Filters.regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏–ø—Ç—É$'), add_crypto_command)
    ],
    states={
        ADD_CRYPTO_NAME: [MessageHandler(Filters.text & ~Filters.command, add_crypto_name)],
        ADD_CRYPTO_SYMBOL: [MessageHandler(Filters.text & ~Filters.command, add_crypto_symbol)],
        ADD_CRYPTO_RATE: [MessageHandler(Filters.text & ~Filters.command, add_crypto_rate)],
        ADD_CRYPTO_SUPPLY: [MessageHandler(Filters.text & ~Filters.command, add_crypto_supply)],
    },
    fallbacks=[CommandHandler('cancel', cancel)],
)
view_transactions_handler = CommandHandler('view_transactions', view_transactions)
view_transactions_handler_message = MessageHandler(Filters.regex(r'^üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏$'), view_transactions)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
view_pending_transactions_handler = CommandHandler('pending_transactions', view_pending_transactions)
view_pending_transactions_handler_message = MessageHandler(
    Filters.regex(r'^üì• –ó–∞—è–≤–∫–∏ \(\d+\)$|^üì• –ó–∞—è–≤–∫–∏$'), 
    view_pending_transactions
)
process_transaction_handler = CallbackQueryHandler(
    process_transaction,
    pattern=r'^(approve|reject)_\d+$'
)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é